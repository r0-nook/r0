SELECT 'столбцы или * для выбора всех столбцов; обязательно'
AS
FROM 'таблица; обязательно'

WHERE 'условие/фильтрация, например, city = 'Moscow'; необязательно'

GROUP BY 'столбец, по которому хотим сгруппировать данные; необязательно'

HAVING 'условие/фильтрация на уровне сгруппированных данных; необязательно'

ORDER BY 'столбец, по которому хотим отсортировать вывод; необязательно'

На примере таблицы Сотрудник рассмотрим терминологию реляционных баз данных:

отношение  – это структура данных целиком, набор записей (в обычном понимании – таблица) , в  примере –это Сотрудник;
кортеж – это каждая строка , содержащая данные (более распространенный термин – запись ), например, <001, Борин С.А, 234-01-23, программист>, все кортежи в отношении должны быть различны;
мощность – число кортежей в таблице (проще говоря, число записей), в данном случае 3, мощность отношения может быть любой (от 0 до бесконечности), порядок следования кортежей - неважен;
атрибут – это столбец в таблице (более распространенный термин – поле ), в примере – Табельный номер, Фамилия И.О., Телефон, Должность) 
размерность – это число атрибутов в таблице, в данном случае – 4;
размерность отношения должна быть больше 0, порядок следования атрибутов существенен;
 домен атрибута – это допустимые значения (неповторяющиеся), которые можно занести в поле , например для атрибута Должность домен – {инженер, программист}.

CREATE TABLE name (	)
book_id	INT PRIMARY KEY AUTO_INCREMENT
title		VARCHAR(50)
author	VARCHAR(30)
price		DECIMAL(8, 2)
amount	INT
название  механика

INSERT INTO (названия столбцов)
VALUES   	(содержимое ячеек), ( , '', ), ()

новые значения нельзя добавлять в поля, описанные как PRIMARY KEY AUTO_INCREMENT


Функция	Описание	Пример
CEILING(x)	возвращает наименьшее целое число, большее или равное x	CEILING(4.2)=5
CEILING(-5.8)=-5
ROUND(x, k)	округляет значение x до k знаков после запятой,
если k не указано – x округляется до целого	ROUND(4.361)=4
ROUND(5.86592,1)=5.9
FLOOR(x)	возвращает наибольшее целое число, меньшее или равное x	FLOOR(4.2)=4
FLOOR(-5.8)=-6
POWER(x, y)	возведение x в степень y	POWER(3,4)=81.0
SQRT(x)	квадратный корень из x	SQRT(4)=2.0
SQRT(2)=1.41...
DEGREES(x)	конвертирует значение x из радиан в градусы	DEGREES(3) = 171.8...
RADIANS(x)	конвертирует значение x из градусов в радианы	RADIANS(180)=3.14...
ABS(x)	модуль числа x	ABS(-1) = 1
ABS(1) = 1
PI()	pi = 3.1415926...	 



IF(логическое_выражение, выражение_1, выражение_2)


Приоритеты операций:

круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)


низкий приоритет NOT AND OR

(author = 'Булгаков М.А.' OR author = 'Есенин С.А.') AND price > 600;

BETWEEN AND
>=  AND <=;

IN ('', '')
= '' OR = ''

price BETWEEN 540.50 AND 800 AND amount IN (2, 3, 5, 7);

____________________________________________________________________________

Символ-шаблон	Описание	Пример
%	Любая строка, содержащая ноль или более символов	SELECT * FROM book WHERE author LIKE '%М.%'
выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»
_ (подчеркивание)	Любой одиночный символ	SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.

____________________________________________________________________________

title LIKE "%_ _%" AND author LIKE "%_С.%"
WHERE amount BETWEEN 2 AND 14 ORDER BY author DESC, title ASC

    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена,
    ROUND(AVG(price),2) AS Средняя_цена

____________________________________________________________________________

SELECT author, SUM(price*amount) AS Стоимость FROM book
WHERE title <> "Идиот" AND title <> "Белая гвардия"
GROUP BY author HAVING Стоимость > 5000
ORDER BY Стоимость DESC

_____________________________________________________________________________

SELECT author, title, price FROM book WHERE price <= ( SELECT AVG(price) FROM book ) ORDER BY price DESC

________________________________________________________________________________

SELECT title, author, amount,
    (
     SELECT AVG(amount)
     FROM book
    ) AS Среднее_количество
FROM book
WHERE abs(amount - (SELECT AVG(amount) FROM book)) >3;


_______________________________________________________________________________


INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE author NOT IN (
        SELECT author
        FROM book
      );

SELECT * FROM book;



_____________________________________

UPDATE таблица SET поле1 = выражение1, поле2 = выражение2
UPDATE book SET price = 0.9 * price WHERE amount BETWEEN 5 AND 10; SELECT * FROM book; 


UPDATE book, supply
SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;

________________________________________


UPDATE book SET buy = amount WHERE buy > amount;
UPDATE book SET price = 0.9 * price WHERE buy = 0;


SELECT * FROM book










